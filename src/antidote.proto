// Java package specifiers
option java_package = "com.basho.riak.protobuf";
option java_outer_classname = "AntidotePB";


enum CRDT_type {
    COUNTER = 3;
    ORSET = 4;
    LWWREG = 5;
    MVREG = 6;
    INTEGER = 7;
    GMAP = 8;
    AWMAP = 9;
    RWSET = 10;
}


//------------------
// Counter

// Counter increment requenst
message ApbCounterUpdate {
    // inc indicates the value to be incremented. To decrement, use a negative value. If no value is given, it will be considered as an increment by 1
    optional sint64 inc = 1;
}

// Response operation
message ApbGetCounterResp {
    required sint32 value = 1;
}


//------------------
// Set

// Set updates request
message ApbSetUpdate{
    enum SetOpType // TODO merge adds/removes
    {
      ADD = 1;
      REMOVE = 2;
    }
    required SetOpType optype = 1;
    repeated bytes adds = 2;
    repeated bytes rems = 3;
}

// Get set request
message ApbGetSetResp {
    repeated bytes value = 1;
}

//------------------
// LWW-register

// Register update
message ApbRegUpdate {
    required bytes value = 1;
}

// Response operation
message ApbGetRegResp {
    required bytes value = 1;
}

//------------------
// MV-register

// use ApbRegUpdate for updates

// response:
message ApbGetMVRegResp {
    repeated bytes value = 1;
}

//------------------
// Integer

message ApbIntegerUpdate {
    oneof operation {
        sint64 inc = 1;
        sint64 set = 2;
    }
}

message ApbGetIntegerResp {
    required sint64 value = 1;
}

//------------------
// Map


message ApbMapKey {
    required bytes key = 1;
    required CRDT_type type = 2;
}

message ApbMapUpdate {
    repeated ApbMapNestedUpdate updates = 1;
}

message ApbMapNestedUpdate {
    required ApbMapKey key = 1;
    oneof operation {
        ApbUpdateOperation update = 2;
        bool remove = 3; // actual value does not matter, but protocol buffer has no unit type
    }
}

message ApbGetMapResp {
    repeated ApbMapEntry entries = 1;
}

message ApbMapEntry {
    required ApbMapKey key = 1;
    required ApbReadObjectResp value = 2;
}


// General reset operation
message ApbCrdtReset {

}

// Response operation
message ApbOperationResp {
    required bool success = 1;
    optional uint32 errorcode = 2;
}


//--------------------------------------------------------------

// Properties parameters of a transaction
message ApbTxnProperties {
    optional uint32 read_write = 1 ; //default = 0 = read_write, 1 = read_only, 2 = write_only
    optional uint32 red_blue = 2 ; // default = 0 = blue, 1 = red
}

// Object (Key) representation
message ApbBoundObject {
  required bytes key = 1;
  required CRDT_type type = 2;
  required bytes bucket = 3;
}

// Objects to be read
message ApbReadObjects {
        repeated ApbBoundObject boundobjects = 1;
        required bytes transaction_descriptor = 2;
}

// An Object to be updated with specified operation
message ApbUpdateOp {
        required ApbBoundObject boundobject = 1;
        enum OPTYPE{
        COUNTER=1;
        SET=2;
        REG=3;
        }
        required OPTYPE optype = 2;
        optional ApbCounterUpdate counterop = 3;
        optional ApbSetUpdate setop = 4;
        optional ApbRegUpdate regop = 5;
}

message ApbUpdateOperation { // TODO use this above
    oneof operation {
        ApbCounterUpdate counterop = 1;
        ApbSetUpdate setop = 2;
        ApbRegUpdate regop = 3;
    }
}

// Objects to be updated
message ApbUpdateObjects {
        repeated ApbUpdateOp updates = 1;
        required bytes transaction_descriptor = 2;
}

// Start Transaction
message ApbStartTransaction {
        optional bytes timestamp = 1;
        optional ApbTxnProperties properties = 2;
}

// Abort Transaction
message ApbAbortTransaction {
        required bytes transaction_descriptor = 1;
}

// Commit Transaction
message ApbCommitTransaction {
        required bytes transaction_descriptor = 1;
}


message ApbStaticUpdateObjects{
	required ApbStartTransaction transaction = 1;
	repeated ApbUpdateOp updates = 2;
}

message ApbStaticReadObjects{
	required ApbStartTransaction transaction = 1;
	repeated ApbBoundObject objects = 2;
}

//Start transaction response
message ApbStartTransactionResp {
        required bool success = 1;
        optional bytes transaction_descriptor = 2;
        optional uint32 errorcode = 3;
}

//Read Objects Response
message ApbReadObjectResp { // TODO use oneOf
        optional ApbGetCounterResp counter = 1;
        optional ApbGetSetResp set = 2;
        optional ApbGetRegResp reg = 3;
}
message ApbReadObjectsResp {
        required bool success = 1;
        repeated ApbReadObjectResp objects = 2;
        optional uint32 errorcode = 3;
}

// Commit Response
message ApbCommitResp {
        required bool success = 1;
        optional bytes commit_time = 2;
        optional uint32 errorcode = 3;
}

message ApbStaticReadObjectsResp {
	required ApbReadObjectsResp objects = 1;
	required ApbCommitResp committime = 2;
}
